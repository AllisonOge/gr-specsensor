id: specsensor_cognitive_controller
label: Cognitive Controller
category: 'Spectrum Sensor'

templates:
  imports: from gnuradio import specsensor
  make: specsensor.cognitive_controller(${frequencies}, ${db_path}, ${cs_method}, ${model_path}, ${log_file})
  callbacks: 
  - get_switch_rate()
#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: frequencies
  label: Channel Frequencies
  dtype: raw
- id: cs_method
  label: Channel Selection Method
  dtype: string
  options: ['random', 'next', 'prev', 'hoyhtya', 'renewaltheory', 'proposed']
  option_labels: ['Random', 'Next', 'Previous', 'Hoyhtya', 'Renewal_theory', 'Proposed']
  default: 'Proposed'
- id: db_path
  label: DB Path
  dtype: file_open
  hide: part
- id: model_path
  label: Model Path
  dtype: file_open
  hide: part
- id: log_file
  label: Log File
  dtype: file_save
  hide: part
#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: channel_state
  domain: message
  optional: true

outputs:
- label: trans_mode
  domain: message
  optional: true
- label: command
  domain: message
  optional: true

asserts:
- ${(cs_method in ['random', 'next', 'prev', 'hoyhtya', 'renewaltheory']) or (cs_method in ["proposed"] and model_path is not None)}

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
