id: specsensor_signal_detector
label: Signal Detector
category: 'Spectrum Sensor'

templates:
  imports: from gnuradio import specsensor
  make: specsensor.signal_detector(${fft_len}, ${vlen}, ${sensitivity}, ${signal_edges}, ${save}, ${sqlite_path}, ${table_name})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: fft_len
  label: FFT Length
  dtype: int
  default: 1024
- id: vlen
  label: Vector Length
  dtype: int
  default: 1
- id: sensitivity
  label: Sensitivity
  dtype: float
  default: 0.9
- id: signal_edges
  label: Signal Edges
  dtype: raw
- id: save
  label: Save
  dtype: bool
  options: [True, False]
  default: True
- id: sqlite_path
  label: SQlite Path
  dtype: file_save
  hide: part
- id: table_name
  label: Table Name
  dtype: string
  default: Sensor
  hide: part
#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in0
  domain: stream
  dtype: complex

outputs:
- label: channel_state
  domain: message
  optional: true

# assert that the sqlite_path is not empty when save is True
asserts:
- ${len(signal_edges) > 0}
- ${(sqlite_path != "" and save) or (sqlite_path == "" and not save)}

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
